(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{1698:function(t,e,i){"use strict";i.r(e),i.d(e,"MetamaskAdapter",(function(){return MetamaskAdapter}));var a=i(8),s=i.n(a),n=i(656),r=i.n(n),h=i(7);class MetamaskAdapter extends h.e{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),s()(this,"adapterNamespace",h.c.EIP155),s()(this,"currentChainNamespace",h.g.EIP155),s()(this,"type",h.a.EXTERNAL),s()(this,"name",h.j.METAMASK),s()(this,"status",h.d.NOT_READY),s()(this,"rehydrated",!1),s()(this,"metamaskProvider",null),this.chainConfig=t.chainConfig||null}get provider(){return this.status===h.d.CONNECTED&&this.metamaskProvider?this.metamaskProvider:null}set provider(t){throw new Error("Not implemented")}async init(t){if(super.checkInitializationRequirements(),this.metamaskProvider=await r()({mustBeMetaMask:!0}),!this.metamaskProvider)throw h.k.notInstalled("Metamask extension is not installed");this.status=h.d.READY,this.emit(h.b.READY,h.j.METAMASK);try{h.p.debug("initializing metamask adapter"),t.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(t){this.emit(h.b.ERRORED,t)}}setAdapterSettings(t){}async connect(){if(super.checkConnectionRequirements(),this.chainConfig||(this.chainConfig=Object(h.n)(h.g.EIP155,1)),this.status=h.d.CONNECTING,this.emit(h.b.CONNECTING,{adapter:h.j.METAMASK}),!this.metamaskProvider)throw h.l.notConnectedError("Not able to connect with metamask");try{await this.metamaskProvider.request({method:"eth_requestAccounts"});const{chainId:t}=this.metamaskProvider;if(t!==this.chainConfig.chainId&&await this.switchChain(this.chainConfig),this.status=h.d.CONNECTED,!this.provider)throw h.l.notConnectedError("Failed to connect with provider");return this.provider.once("disconnect",()=>{this.disconnect()}),this.emit(h.b.CONNECTED,{adapter:h.j.METAMASK,reconnected:this.rehydrated}),this.provider}catch(t){throw this.status=h.d.READY,this.rehydrated=!1,this.emit(h.b.ERRORED,t),h.l.connectionError("Failed to login with metamask wallet")}}async disconnect(){var t;let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(this.status!==h.d.CONNECTED)throw h.l.disconnectionError("Not connected with wallet");null===(t=this.provider)||void 0===t||t.removeAllListeners(),e.cleanup?(this.status=h.d.NOT_READY,this.metamaskProvider=null):this.status=h.d.READY,this.rehydrated=!1,this.emit(h.b.DISCONNECTED)}async getUserInfo(){if(this.status!==h.d.CONNECTED)throw h.l.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async switchChain(t){if(!this.metamaskProvider)throw h.l.notConnectedError("Not connected with wallet");try{await this.metamaskProvider.request({method:"wallet_switchEthereumChain",params:[{chainId:t.chainId}]})}catch(e){if(4902!==e.code)throw e;await this.metamaskProvider.request({method:"wallet_addEthereumChain",params:[{chainId:t.chainId,chainName:t.displayName,rpcUrls:[t.rpcTarget]}]})}}}}}]);