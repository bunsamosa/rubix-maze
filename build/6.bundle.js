(window.webpackJsonp=window.webpackJsonp||[]).push([[6,8,11],{1433:function(t,n){},1438:function(t,n){},1450:function(t,n){},1451:function(t,n){},1453:function(t,n){},1705:function(t,n,i){"use strict";i.r(n),i.d(n,"PhantomAdapter",(function(){return PhantomAdapter}));var e=i(8),o=i.n(e),s=i(7),a=i(1466);function poll(t,n,i){return new Promise((e,o)=>{i>0?setTimeout(async()=>{const s=await t();s&&e(s),s||poll(t,n,i-1).then(t=>(e(t),t)).catch(t=>o(t))},n):e(!1)})}class PhantomAdapter extends s.e{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),o()(this,"name",s.j.PHANTOM),o()(this,"adapterNamespace",s.c.SOLANA),o()(this,"currentChainNamespace",s.g.SOLANA),o()(this,"type",s.a.EXTERNAL),o()(this,"status",s.d.NOT_READY),o()(this,"_wallet",null),o()(this,"phantomProvider",null),o()(this,"rehydrated",!1),o()(this,"_onDisconnect",()=>{this._wallet&&(this._wallet.off("disconnect",this._onDisconnect),this.rehydrated=!1,this.status=this.status===s.d.CONNECTED?s.d.READY:s.d.NOT_READY,this.emit(s.b.DISCONNECTED))}),this.chainConfig=t.chainConfig||null}get isWalletConnected(){var t;return!(null===(t=this._wallet)||void 0===t||!t.isConnected||this.status!==s.d.CONNECTED)}get provider(){var t;return(null===(t=this.phantomProvider)||void 0===t?void 0:t.provider)||null}set provider(t){throw new Error("Not implemented")}setAdapterSettings(t){}async init(t){if(super.checkInitializationRequirements(),this.chainConfig||(this.chainConfig=Object(s.n)(s.g.SOLANA,"0x1")),this._wallet=await async function(){var t;let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{interval:1e3,count:3};const i="undefined"!=typeof window&&!(null===(t=window.solana)||void 0===t||!t.isPhantom);if(i)return window.solana;const e=await poll(()=>{var t;return null===(t=window.solana)||void 0===t?void 0:t.isPhantom},n.interval,n.count);return e?window.solana:null}({interval:500,count:3}),!this._wallet)throw s.k.notInstalled();this.phantomProvider=new a.PhantomInjectedProvider({config:{chainConfig:this.chainConfig}}),this.status=s.d.READY,this.emit(s.b.READY,s.j.PHANTOM);try{s.p.debug("initializing phantom adapter"),t.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(t){s.p.error("Failed to connect with cached phantom provider",t),this.emit("ERRORED",t)}}async connect(){var t=this;try{if(super.checkConnectionRequirements(),this.status=s.d.CONNECTING,this.emit(s.b.CONNECTING,{adapter:s.j.PHANTOM}),!this._wallet)throw s.k.notInstalled();if(this._wallet.isConnected)await this.connectWithProvider(this._wallet);else{const n=this._wallet._handleDisconnect;try{await new Promise((i,e)=>{if(!this._wallet)return e(s.k.notInstalled());this._wallet.once("connect",async()=>{await this.connectWithProvider(this._wallet),i(this.provider)}),this._wallet._handleDisconnect=function(){e(s.k.windowClosed());for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return n.apply(t._wallet,o)},this._wallet.connect().catch(t=>{e(t)})})}catch(t){if(t instanceof s.m)throw t;throw s.l.connectionError(null==t?void 0:t.message)}finally{this._wallet._handleDisconnect=n}}if(!this._wallet.publicKey)throw s.l.connectionError();return this._wallet.on("disconnect",this._onDisconnect),this.provider}catch(t){throw this.status=s.d.READY,this.rehydrated=!1,this.emit(s.b.ERRORED,t),t}}async disconnect(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(!this.isWalletConnected)throw s.l.notConnectedError("Not connected with wallet");try{var n;await(null===(n=this._wallet)||void 0===n?void 0:n.disconnect()),t.cleanup&&(this.status=s.d.NOT_READY,this.phantomProvider=null,this._wallet=null),this.emit(s.b.DISCONNECTED)}catch(t){this.emit(s.b.ERRORED,s.l.disconnectionError(null==t?void 0:t.message))}}async getUserInfo(){if(!this.isWalletConnected)throw s.l.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async connectWithProvider(t){if(!this.phantomProvider)throw s.l.connectionError("No phantom provider");return await this.phantomProvider.setupProvider(t),this.status=s.d.CONNECTED,this.emit(s.b.CONNECTED,{adapter:s.j.PHANTOM,reconnected:this.rehydrated}),this.provider}}}}]);